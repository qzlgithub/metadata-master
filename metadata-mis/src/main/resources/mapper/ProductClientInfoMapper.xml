<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mingdong.mis.domain.mapper.ProductClientInfoMapper">
    <resultMap id="BaseResultMap" type="ProductClientInfo">
        <result column="product_id" property="productId" jdbcType="BIGINT" />
        <result column="product_name" property="productName" jdbcType="VARCHAR" />
        <result column="code" property="code" jdbcType="VARCHAR" />
        <result column="custom" property="custom" jdbcType="TINYINT" />
        <result column="type" property="type" jdbcType="TINYINT" />
        <result column="app_id" property="appId" jdbcType="VARCHAR" />
        <result column="client_product_id" property="clientProductId" jdbcType="BIGINT" />
        <result column="bill_plan" property="billPlan" jdbcType="TINYINT" />
        <result column="opened" property="opened" jdbcType="TINYINT" />
        <result column="start_date" property="startDate" jdbcType="TIMESTAMP" />
        <result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
        <result column="amount" property="amount" jdbcType="DECIMAL" />
        <result column="balance" property="balance" jdbcType="DECIMAL" />
        <result column="unit_amt" property="unitAmt" jdbcType="DECIMAL" />
        <result column="arrear_time" property="arrearTime" jdbcType="TIMESTAMP" />
        <result column="remark" property="remark" jdbcType="VARCHAR" />
        <result column="content" property="content" jdbcType="LONGVARCHAR" />
    </resultMap>

    <!-- @formatter:off -->
    <select id="countBy" resultType="int">
        select
            count(*)
        from `product` p
            left join `client_product` cp
                on p.`id` = cp.`product_id` and cp.`client_id` = #{clientId}
            left join `recharge` pr
                on cp.`latest_recharge_id` = pr.`id`
        where p.`enabled` = 1
        <if test="typeIdList != null and typeIdList.size() > 0">
            and p.`type` in
            <foreach collection="typeIdList" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="incOpened == null">and (cp.opened != 1 or cp.opened is null)</if>
    </select>

    <select id="getListBy" resultMap="BaseResultMap">
        select
            p.`id`          as product_id,
            p.`name`        as product_name,
            p.`remark`      as remark,
            cp.`id`         as client_product_id,
            cp.`bill_plan`  as bill_plan,
            cp.`opened`     as opened,
            pr.`start_date` as start_date,
            pr.`end_date`   as end_date,
            pr.`unit_amt`   as unit_amt,
            cp.`balance`    as balance
        from `product` p
            left join `client_product` cp
                on p.`id` = cp.`product_id` and cp.`client_id` = #{clientId}
            left join `recharge` pr
                on cp.`latest_recharge_id` = pr.`id`
        where p.`enabled` = 1
        <if test="typeIdList != null and typeIdList.size() > 0">
            and p.`type` in
            <foreach collection="typeIdList" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </if>
        <if test="incOpened == null">and (cp.opened != 1 or cp.opened is null)</if>
        order by p.`create_time` desc
    </select>

    <select id="getListByClient" parameterType="Long" resultMap="BaseResultMap">
        select
            p.`id`           as product_id,
            p.`name`         as product_name,
            p.`code`         as code,
            p.`custom`       as custom,
            p.`type`         as type,
            cp.`app_id`      as app_id,
            cp.`id`          as client_product_id,
            cp.`bill_plan`   as bill_plan,
            cp.`opened`      as opened,
            pr.`start_date`  as start_date,
            pr.`end_date`    as end_date,
            pr.`amount`      as amount,
            cp.`balance`     as balance,
            pr.`unit_amt`    as unit_amt,
            pr.`update_time` as arrear_time,
            p.`remark`       as remark
        from `product` p
            left join `client_product` cp
                on p.`id` = cp.`product_id` and cp.`client_id` = #{clientId}
            left join `recharge` pr
                on cp.`latest_recharge_id` = pr.`id`
        where p.`enabled` = 1
    </select>

    <select id="getClientProductCustomBy" parameterType="Long" resultMap="BaseResultMap">
        select
            p.`id`         as product_id,
            p.`name`       as product_name,
            p.`code`       as code,
            p.`custom`     as custom,
            p.`type`       as type,
            cp.`app_id`    as app_id,
            cp.`id`        as client_product_id,
            cp.`bill_plan` as bill_plan,
            cp.`opened`    as opened,
            p.`remark`     as remark
        from `product` p
            inner join `client_product` cp
                on p.`id` = cp.`product_id`
        where p.`custom` = 1 and p.`enabled` = 1 and cp.`client_id` = #{clientId}
    </select>

    <select id="getClientProductInfo" parameterType="Long" resultMap="BaseResultMap">
        select
            p.`id`          as product_id,
            p.`name`        as product_name,
            p.`code`        as code,
            p.`custom`      as custom,
            p.`type`        as type,
            cp.`app_id`     as app_id,
            cp.`id`         as client_product_id,
            cp.`bill_plan`  as bill_plan,
            cp.`opened`     as opened,
            pr.`start_date` as start_date,
            pr.`end_date`   as end_date,
            pr.`amount`     as amount,
            cp.`balance`    as balance,
            pr.`unit_amt`   as unit_amt,
            p.`remark`      as remark,
            pt.`content`    as content
        from `client_product` cp
            left join `product` p
                on cp.`product_id` = p.`id`
            left join `product_txt` pt
                on cp.`product_id` = pt.`id`
            left join `recharge` pr
                on cp.`latest_recharge_id` = pr.`id`
        where cp.`id` = #{id}
    </select>

    <select id="getClientDictList" parameterType="Long" resultMap="BaseResultMap">
        select
            p.`id`     as product_id,
            p.`name`   as product_name,
            p.`code`   as code,
            p.`custom` as custom,
            p.`type`   as type
        from `client_product` cp
            left join `product` p
                on cp.`product_id` = p.`id`
        where cp.`client_id` = #{clientId}
    </select>

    <select id="countByClientOpened" resultType="int">
        select count(*)
        from `product` p
            left join `client_product` cp
                on p.`id` = cp.`product_id` and cp.`client_id` = #{clientId}
        where p.`enabled` = 1
        <if test="opened == 1">and cp.`opened` = 1</if>
        <if test="opened == 0">and ((p.`custom` = 0 and cp.`id` is null) or (p.`custom` = 1 and cp.`opened` = 0))</if>
    </select>

    <select id="getListByClientOpened" resultMap="BaseResultMap">
        select
            p.`id`           as product_id,
            p.`name`         as product_name,
            p.`code`         as code,
            p.`custom`       as custom,
            p.`type`         as type,
            cp.`app_id`      as app_id,
            cp.`id`          as client_product_id,
            cp.`bill_plan`   as bill_plan,
            cp.`opened`      as opened,
            pr.`start_date`  as start_date,
            pr.`end_date`    as end_date,
            pr.`amount`      as amount,
            cp.`balance`     as balance,
            pr.`unit_amt`    as unit_amt,
            cp.`update_time` as arrear_time,
            p.`remark`       as remark
        from `product` p
            left join `client_product` cp
                on p.`id` = cp.`product_id` and cp.`client_id` = #{clientId}
            left join `recharge` pr
                on cp.`latest_recharge_id` = pr.`id`
        where p.`enabled` = 1
        <if test="opened == 1">and cp.`opened` = 1</if>
        <if test="opened == 0">and ((p.`custom` = 0 and cp.`id` is null) or (p.`custom` = 1 and cp.`opened` = 0))</if>
    </select>
    <!-- @formatter:on -->
</mapper>
