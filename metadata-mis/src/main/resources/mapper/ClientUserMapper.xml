<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mingdong.mis.domain.mapper.ClientUserMapper">
    <resultMap id="BaseResultMap" type="ClientUser">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="client_id" property="clientId" jdbcType="BIGINT" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="phone" property="phone" jdbcType="VARCHAR" />
        <result column="email" property="email" jdbcType="VARCHAR" />
        <result column="username" property="username" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="app_secret" property="appSecret" jdbcType="VARCHAR" />
        <result column="enabled" property="enabled" jdbcType="TINYINT" />
        <result column="deleted" property="deleted" jdbcType="TINYINT" />
    </resultMap>

    <sql id="select_all">
        select
            `id`, `create_time`, `update_time`, `client_id`, `name`, `phone`, `email`, `username`, `password`,
            `app_secret`, `enabled`, `deleted`
        from `client_user`
    </sql>

    <insert id="add" parameterType="ClientUser" useGeneratedKeys="true" keyProperty="id">
        insert into `client_user`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">`id`,</if>
            <if test="createTime != null">`create_time`,</if>
            <if test="updateTime != null">`update_time`,</if>
            <if test="clientId != null">`client_id`,</if>
            <if test="name != null">`name`,</if>
            <if test="phone != null">`phone`,</if>
            <if test="email != null">`email`,</if>
            <if test="username != null">`username`,</if>
            <if test="password != null">`password`,</if>
            <if test="appSecret != null">`app_secret`,</if>
            <if test="enabled != null">`enabled`,</if>
            <if test="deleted != null">`deleted`,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="clientId != null">#{clientId},</if>
            <if test="name != null">#{name},</if>
            <if test="phone != null">#{phone},</if>
            <if test="email != null">#{email},</if>
            <if test="username != null">#{username},</if>
            <if test="password != null">#{password},</if>
            <if test="appSecret != null">#{appSecret},</if>
            <if test="enabled != null">#{enabled},</if>
            <if test="deleted != null">#{deleted},</if>
        </trim>
    </insert>

    <update id="updateById" parameterType="ClientUser">
        update `client_user`
        set `create_time` = #{createTime}, `update_time` = #{updateTime}, `client_id` =
        #{clientId}, `name` = #{name}, `phone` = #{phone}, `email` = #{email}, `username` = #{username}, `password` =
        #{password}, `app_secret` = #{appSecret}, `enabled` = #{enabled}, `deleted` = #{deleted}
        where `id` = #{id}
    </update>

    <update id="updateSkipNull" parameterType="ClientUser">
        update `client_user`
        <set>
            <if test="createTime != null">`create_time` = #{createTime},</if>
            <if test="updateTime != null">`update_time` = #{updateTime},</if>
            <if test="clientId != null">`client_id` = #{clientId},</if>
            <if test="name != null">`name` = #{name},</if>
            <if test="phone != null">`phone` = #{phone},</if>
            <if test="email != null">`email` = #{email},</if>
            <if test="username != null">`username` = #{username},</if>
            <if test="password != null">`password` = #{password},</if>
            <if test="appSecret != null">`app_secret` = #{appSecret},</if>
            <if test="enabled != null">`enabled` = #{enabled},</if>
            <if test="deleted != null">`deleted` = #{deleted},</if>
        </set>
        where `id` = #{id}
    </update>

    <select id="findById" parameterType="Long" resultMap="BaseResultMap">
        <include refid="select_all" />
        where `id` = #{id}
    </select>

    <select id="findByUsername" parameterType="String" resultMap="BaseResultMap">
        <include refid="select_all" />
        where `username` = #{username}
    </select>

    <select id="getListByClientAndStatus" resultMap="BaseResultMap">
        <include refid="select_all" />
        where `client_id` = #{clientId}
        <if test="enabled != null">and `enabled` = #{enabled}</if>
        <if test="deleted != null">and `deleted` = #{deleted}</if>
    </select>

    <update id="resetPasswordByIds">
        update `client_user` set `password` = #{password}, `update_time` = #{date} where `id` in
        <foreach collection="idList" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>

    <update id="updateStatusByIds">
        update `client_user` set `enabled` = #{enabled}, `update_time` = #{date} where `id` in
        <foreach collection="idList" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>

    <select id="countByClientAndStatus" resultType="Integer">
        select count(*) from `client_user` where `client_id` = #{clientId}
        <if test="enabled != null">and `enabled` = #{enabled}</if>
        <if test="deleted != null">and `deleted` = #{deleted}</if>
    </select>

    <select id="getListByClient" parameterType="Long" resultMap="BaseResultMap">
        <include refid="select_all" />
        where `client_id` = #{clientId}
    </select>

    <select id="getAvailableListByClient" parameterType="Long" resultMap="BaseResultMap">
        <include refid="select_all" />
        where `client_id` = #{clientId} and `deleted` = 0
    </select>
    <select id="getSubUserListByClient" parameterType="Long" resultMap="BaseResultMap">
        select
            cur.`id` as       id, cur.`create_time` as create_time, cur.`update_time` as update_time, cur.`client_id` as
                              client_id, cur.`name` as name, cur.`phone` as phone, cur.`email` as email,
            cur.`username` as username,
            cur.`password` as password, cur.`app_secret` as app_secret, cur.`enabled` as enabled,
            cur.`deleted` as  deleted
        from client_user cur inner join client ct
                on cur.`client_id` = ct.`id` and cur.`deleted` = 0 and cur.`id` !=
                                                                       ct.`primary_user_id` and
                   cur.`client_id` = #{clientId}
    </select>
    <select id="countSubUserListByClient" parameterType="Long" resultType="Integer">
        select count(cur.`id`)
        from client_user cur inner join client ct
                on cur.`client_id` = ct.`id` and cur.`deleted`
                                                 = 0 and cur.`id` != ct.`primary_user_id` and
                   cur.`client_id` = #{clientId}
    </select>

    <select id="getListByIds" resultMap="BaseResultMap">
        <include refid="select_all" />
        where `id` in
        <foreach collection="ids" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>
</mapper>